version: '2'
services:
  mynginx:
    container_name: mynginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
      - "8086:8086"
      - "8087:8087"
    volumes:
      - ../../flash:/mnt/www/
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/nginx:/var/log/nginx/
    links:
      - myphp:myphp
      - myredis:myredis
      # - mymemcached:mymemcached
    #外部链接容器方法，用于连接手动创建、别的compose创建
    external_links:
      - myphp
      # - gitlab
    networks:
      - code-network
  myredis:
    container_name: myredis
    image: redis:4.0
    restart: always
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - code-network
  mysql:
    container_name: mysql
    image: mysql:5.7
    #build: ./mysql
    restart: always
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./mysql/my.cnf:/etc/my.cnf
      - /Users/alex/Documents/go:/root/go
    environment:
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
      - "12800:12800"
    networks:
      - code-network
    # links:
    #   - elasticsearch:elasticsearch
  myphp:
    container_name: myphp
    #image: alex/php:7.1
    build: ./php72
    restart: always
    # ports:
    #   - "9000:9002"
    expose:
      - "9000"
      - "8080"
      - "19001"
    volumes:
      - ../../flash:/mnt/www
      #- ./php72/conf.d/:/usr/local/etc/php/conf.d/
    networks:
      - code-network
    links:
      - mysql:mysql
      - myredis:myredis
    environment:
        XDEBUG_CONFIG: remote_host=host.docker.internal
  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:2.3.5
  #   # build: ./elasticsearch
  #   restart: always
  #   environment:
  #     - cluster.name=elasticsearch
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   expose:
  #     - "9200"
  #   networks:
  #     - code-network
  # mykibana:
  #   container_name: mykibana
  #   image: docker.elastic.co/kibana/kibana:6.5.4
  #   restart: always
  #   environment:
  #     SERVER_NAME: kibana
  #     ELASTICSEARCH_URL: http://192.168.199.178:9200
  #   ports:
  #     - "5601:5601"
  #   #expose:
  #   #  - "5601"
  #   networks:
  #     - code-network
  
  # hbase001:
  #   container_name: hbase001
  #   image: harisekhon/hbase:1.3
  #   restart: always
  #   ports:
  #     - "16010:16010"

  # eskibana:
  #   container_name: eskibana
  #   image: nshou/elasticsearch-kibana
  #   restart: always
  #   volumes:
  #     - ./data/elasticsearch/data:/home/elasticsearch/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #     - "5601:5601"
  #   #expose:
  #   #  - "5601"
  #   networks:
  #     - code-network
  # myportainer:
  #   container_name: myportainer
  #   image: docker.io/portainer/portainer
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - "9001:9000"
  #   networks:  
  #     - code-network
  #mymongo:
  #  container_name: mymongo
  #  #build: ./mongo
  #  image: mvertes/alpine-mongo
  #  restart: always
  #  ports:
  #    - 27017:27017
  #  volumes:
  #    - ./mongo/setup:/docker-entrypoint-initdb.d/
  #  environment:
  #    MONGO_INITDB_ROOT_USERNAME: admin
  #    MONGO_INITDB_ROOT_PASSWORD: admin
  #  networks:
  #    - code-network
networks:
  code-network:
    driver: bridge